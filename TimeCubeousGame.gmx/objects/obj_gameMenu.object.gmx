<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize in game menu.

global.gameMenu_ON = 0;
global.inventoryGUI_ON = 0;

// For use with the textbox engine, don't remove until we know more.
global.fnt_textbox=font_add_sprite(spr_fontmain,ord(" "),1,1);

//Char Information, stored for display
name = "Neku";
HP = 50;
MP = 10;

// The following stores the icons for the game menu!
// gameMenu is an array of menu options, menu[i] is the ith location in the array.
gameMenu[0] = "Inventory";
gameMenu[1] = "Status";
gameMenu[2] = "Save";
gameMenu[3] = "Quit";

// Declare the amount of vertical space between menu items.
gMenuSpace = 50;
playerInfoSpace = 25;

// Declare the index within the move array where the cursor should be.
cursorPos = 0; // move[cursorPos] returns the item the cursor is pointing to.
// e.g. if cursorPos = 0, then move[cursorPos] should return "Start Game", and
   // the actual cursor should be pointing to "Start Game" in the menu. 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Code to move up and down menu.

/* Code to move up and down the menu */

// Step events run periodically, a few times per second or so.

// Using var makes move a local variable.

// Local variables only exist within the code they are made, and only that instance 
// of the script. They will be forgotten and restarted every time the script reruns.

if (global.gameMenu_ON &amp;&amp; !global.inventoryGUI_ON &amp;&amp; !global.textbox_ON)
{
    var move = 0;
// keyboard_check_pressed() is a bool function that returns 1 if the given
// parameter key is being pressed, 0 ow.

// move will dec by 1 if you're pressing the up arrow or W key.
   move -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), 0);

// move will inc by 1 if you're pressing down arrow or S key.
   move += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), 0);

// move = 0 means that right now, we don't want to move.

// Otherwise, change the cursor position, in a circular direction.
   if (move != 0) {
      cursorPos += move;
      if (cursorPos &lt; 0) {
         cursorPos = array_length_1d(gameMenu) - 1;
      }
      if (cursorPos &gt;= array_length_1d(gameMenu)) {
            cursorPos = 0;
      }
   }

// Check for the selection key push.

    var select;
    select = max(keyboard_check_released(vk_enter), keyboard_check_released(ord("Z")), 0);

    if (select == 1) { scr_gameMenu(); }

}

else { cursorPos = 0; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the GUI for this item.

if (global.gameMenu_ON &amp;&amp; !global.textbox_ON) {
   draw_set_color(c_black);

    draw_sprite(spr_gameMenu, 0, 0, 0);
    draw_sprite(spr_pointer, 0, x + 16, y + 232 + (cursorPos * gMenuSpace));
    draw_text(x+50, y+50, "Neku");
    draw_text(x+50, y+80, "HP:  50");
    draw_text(x+50, y+110, "MP:  10");
    
    
    var i;
    for (i = 0; i &lt; array_length_1d(gameMenu); i += 1) {
        draw_text(x + 16 + gMenuSpace, y + 250 + (i * gMenuSpace), string(gameMenu[i]));
        }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle the menu on and off with the shift key.

// Toggle the menu on and off w/the shift key
// Only turn menu on if this shift button has been pressed
// and the textbox is currently off.
if (!global.gameMenu_ON &amp;&amp; !global.textbox_ON) {
   global.gameMenu_ON = 1;
}

else { 
     global.gameMenu_ON = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
