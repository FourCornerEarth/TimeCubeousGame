<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>battle_itemMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage item options
show_debug_message("BATTLE ITEM OPS CREATED.");

//Do the event creation event from the menuModule, not the direct parent.
event_perform_object(menu_battleMenuModule, ev_create, 0);

// Set orientation.
orientation = 1;
menu_setKeysByOrientation(orientation);

//The item selected from the inventory is now a selected item.
selectedItem = battle_itemMenu.selectedItem;

// Set scriptToRun
scriptToRun = battle_itemOpsScript;

// Arg to pass
argsToPass = selectedItem;

// Set current menu.
menu[0] = "Use";
menu[1] = "Back";

// Menu isn't array here, so set to 0 for ds_list.
menu_IsArray = 1;

// Declare the amount of space between menu items.
space = 30;

// Add self to state tracking registry.
objStateID = 8;
state_addSelfToRegistry(global.playerTurnState, global.playerTurnReg, objStateID);
battle_setNextState(battle_playerTurn, objStateID);
//show_debug_message("In battle menu, setNextState, playerTurn machine now: " + string(global.playerTurnState));

// Set menu to on.
menu_ON = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("ITEM OPS DESTROY EVENT.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Run item menu's step function.

battle_battleMenuStepFunc(global.playerTurnState);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Item Options GUI
if (global.playerTurnState[objStateID] &amp;&amp; menu_ON &amp;&amp; battle_playerTurn.playerTurnOK &amp;&amp; !battle_playerTurn.turnRunning)
//if (global.playerTurnState[objStateID] &amp;&amp; menu_ON &amp;&amp; !battle_playerTurn.turnRunning)
{
   draw_set_color(c_white);
   // Draw pointer
   draw_sprite(spr_pointer, 0, x + 60 + 75 + (cursorPos * 150), y + 480);
    
    // Draw info and remove options.
    draw_text(x + 60 + 75 + 50, y + 490, string("Use"));
    draw_text(x + 60 + 75 + 200, y + 490, string("Back"));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
