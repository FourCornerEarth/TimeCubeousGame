<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up initial variables.
show_debug_message("CREATING NAME SELECT SCREEN.");
// To grab the name of the character
name = "";
scriptToRun = menus_scr_nameSelect;

// This tells the cursor what char we're on, and what we want to write.
cursorPos = ord("A");

// A boolean that keeps track of whether the name is empty.
nameEmpty = 0;

// Needed variable because of the way script_execute works from the step function.
argsToPass = 0; // Leave as 0, which denotes no arguments being passed.

// How much space horizontally between letters.
hSpace = 60;

// How much space vertically between letters.
vSpace = 50;

// Where we should start drawing letters.
xStart = 138;
yStart = 170;

// Tracks the current position of the letter we're drawing.
xPos = xStart;
yPos = yStart;

// Unnecessary, will later delete.
mRow = 0;
mCol = 0;

// Initialize the last cursor position.
lastCursorPos = -1;

// The default keys for this.
MENU_KEY_LEFT_1 = vk_left;
MENU_KEY_LEFT_2 = ord("A");
MENU_KEY_RIGHT_1 = vk_right;
MENU_KEY_RIGHT_2 = ord("D");
MENU_KEY_UP_1 = vk_up;
MENU_KEY_UP_2 = ord("W");
MENU_KEY_DOWN_1 = vk_down;
MENU_KEY_DOWN_2 = ord("S");
MENU_CONFIRM_1 = vk_enter;
MENU_CONFIRM_2 = ord("Z");
MENU_BACK_LEFT = vk_left;
MENU_BACK = ord("X");
MENU_BACK_UP = vk_up;
MENU_EXIT = ord("C");
MENU_OPEN = ord("C");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset text settings when this object is done.
show_debug_message("NAME SELECT DESTROY EVENT.");
// Set the player name to the chosen name.
global.name = name;

// Reset text settings to normal.
scr_resetTextSettings();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move through the keyboard.

/* Explanation of alphabet grid/cursorPos */

/*
  The cursorPos itself begins at 65, which is the equivalent of ord("A"). This allows us to 
  know exactly what to draw when we're "coloring" a letter for the purpose of denoting
  that it has been selected.
  
  Note that these are in Unicode, which means that after ord("Z"), there are several spots allotted
  to symbols, rather than in ASCII, where it'd immediately start on lower case letters, so we have
  to account for that.
  
  Move will increment/decrement by 9 if you move up and down the grid (as expected), since there are 9
  letters per row. It will inc/dev by 1 if you move left or right. This script also allows movement to skip the
  symbol characters in question, moving directly between lower case and upper case.
  
  The last letter value of cursorPos can be ord("z"). However, we have a "back" and a "confirm" option as well.
  
  Those are simply coded in as ord("z")+1 and ord("z")+2 in that order.
*/

// Keeps track of where we're moving in the alphabet grid.
var move = 0;
var mLt = 0;
var mRt = 0;
var mUp = 0;
var mDn = 0;

// Move up
   mUp -= max(keyboard_check_pressed(MENU_KEY_UP_1), keyboard_check_pressed(MENU_KEY_UP_2), 0);
// Move left
   mLt -= max(keyboard_check_pressed(MENU_KEY_LEFT_1), keyboard_check_pressed(MENU_KEY_LEFT_2), 0);
   
   
// Move down
   mDn += max(keyboard_check_pressed(MENU_KEY_DOWN_1), keyboard_check_pressed(MENU_KEY_DOWN_2), 0);
// Move rt
   mRt += max(keyboard_check_pressed(MENU_KEY_RIGHT_1), keyboard_check_pressed(MENU_KEY_RIGHT_2), 0);

// Move keeps track of what keypresses the user's done.   
   move += ((mUp*9) + mLt) + ((mDn*9) + mRt);

// If we're moving the cursor right now      
   if (move != 0) { // move = 0 means user has pressed nothing.
      // Store the last position of the cursor.
      lastCursorPos = cursorPos;
      // Then increment the cursor by how much we've moved.
      cursorPos += move;
      
      // If the cursor is trying to go lower than the first letter, set it to the first letter.
      if (cursorPos &lt; ord("A")) {cursorPos = ord("A");}
      
      // If it's trying to go higher than the last option, set it to the last option.
      else if (cursorPos &gt; ord("z")+2) {cursorPos = ord("z")+2;}
      
    /* 
       The following functions make the menu cursor move intuitively for the user.
    */
      // If we're moving to the right from Z, move directly to a.
      if (lastCursorPos == ord("Z") &amp;&amp; mRt) {cursorPos = ord("a");}
      
      // If we're moving to the left from a, move directly to Z.
      if (lastCursorPos == ord("a") &amp;&amp; -mLt) {cursorPos = ord("Z");}
      
      // If we're in the last capitals row and moving down, or first lower case row and moving up, 
      // then instead of adding/subtracting 9, add/subtract 14 so we can move directly up/down the same column.
      if (lastCursorPos &gt;= 83 &amp;&amp; lastCursorPos &lt;= 90 &amp;&amp; mDn) {cursorPos = lastCursorPos + 14;}
      if (lastCursorPos &gt;= 97 &amp;&amp; lastCursorPos &lt;= 104 &amp;&amp; -mUp) {cursorPos = lastCursorPos - 14;}
      
      // If we're on R, the first letter directly beneath is i, so move to i, and vice versa.
      if(lastCursorPos == 82 &amp;&amp; mDn) {cursorPos = 105;}
      if (lastCursorPos == 105 &amp;&amp; -mUp) {cursorPos = 82;}
      
   }
   
   

// Check for the selection of something on the menu.
   var select;
   select = max(keyboard_check_released(MENU_CONFIRM_1), keyboard_check_released(MENU_CONFIRM_2), 0);

    if (select == 1) {  
       script_execute(scriptToRun, argsToPass); 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the "menu".

//  Begin with settings for drawing.
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_font(fnt_magicForest24);

// If the name is empty, leave a message to such.
if (nameEmpty) {
   draw_text(408, 70, "Name cannot be empty.");
}
// Otherwise, print a message to name the process.
else {draw_text(408, 70, "Name the process.");}

// Draw the name if there's anything to draw.
draw_text(408, 120, string(name));

// Set the place to start drawing.
var xLoc = xStart;
var yLoc = yStart;

// Draw all the chars from capital A to capital Z.
for(var i = ord("A"); i &lt;= ord("Z"); i++) {
    // If we've selected something, then draw the selected char in green.
    if (i == cursorPos) {
       draw_set_color(global.c_resynchGreen);
       draw_text(xLoc, yLoc, chr(i));
       draw_set_color(c_white);
    }
    
    // Draw all others in white.
    else {draw_text(xLoc, yLoc, chr(i));}
    
    // Determine next place to draw a character.
    if (((i-(ord("A")-1)) mod 9) != 0) {
       xLoc += hSpace;
    }
    else {
       xLoc = xStart;
       yLoc += vSpace; 
    }
}

// Put space between the upper and lower case letters.
yLoc += vSpace*1.5;
xLoc = xStart;

// Draw lower case letters same as above.
for(var i = ord("a"); i &lt;= ord("z"); i++) {
    if (cursorPos == i) {
       draw_set_color(global.c_resynchGreen);
       draw_text(xLoc, yLoc, chr(i));
       draw_set_color(c_white);
    }
    else {draw_text(xLoc, yLoc, chr(i));}
    if (((i-(ord("a")-1)) mod 9) != 0) {
       xLoc += hSpace;
    }
    else {
       xLoc = xStart;
       yLoc += vSpace; 
    }
}

// Leave another space.
yLoc += vSpace*1.5;
xLoc = xStart+100;

// Draw the "Back" and "Confirm" options.
var s = "Back";
if (cursorPos == ord("z")+1) {
     draw_set_color(global.c_resynchGreen);
     draw_text(xLoc, yLoc, "Back");
     draw_set_color(c_white);
}
else {
     draw_text(xLoc, yLoc, "Back");
}
if (cursorPos == ord("z")+2) {
   draw_set_color(global.c_resynchGreen);
   draw_text(xLoc + 250 + string_width(s), yLoc, "Confirm");
   draw_set_color(c_white);
}
else {
     draw_text(xLoc + 250 + string_width(s), yLoc, "Confirm");
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
