<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>menu_menuModule</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Example Create template. DON'T ACTUALLY USE!

/* 
   CREATOR NOTE: You will not really want to change any of the variable names
   you see here, except where otherwise noted. It will cause the inner workings to
   break.
   
   Don't forget to make this object a child of the baseMenu or another menuModule!
*/



/* 
   If this inherits from another menuModule, decide whether to inherit from
   the original menuModule or from the immediate parent menuModule.
   If you changed variables in the previous module, you may want to use the latter.
                           PICK ONLY ONE! 
*/

/* Inherit from direct parent menuModule */
           event_inherited();

/* Inherit from original menuModule */
//       event_perform_object(menu_menuModule, ev_create, 0);




/* If the menu pointer will move up and down, leave this. 
   If it will move left and right, make orientation = 1. */
orientation = 0;




/* Set the keys based on the orientation you chose.
   PROBABLY SHOULD LEAVE THIS BE! */
scr_setKeysByOrientation(orientation);




/* If you want to change any of the set keys, now is the time to do it. */
//   MENU_KEY_UP_1 = newKey;
//   MENU_KEY_UP_2 = newKey;
//   MENU_KEY_DOWN_1 = newKey;
//   MENU_KEY_DOWN_2 = newKey;
//   MENU_CONFIRM_1 = newKey;
//   MENU_CONFIRM_2 = newKey;
//   MENU_BACK = newKey;
//   MENU_EXIT = newKey;



/* If your menu is an array, leave. If it's a ds_list, set = 1. */
menu_IsArray = 1;



/* 
   Set scriptToRun to the script that should run when you select an item on menu
*/
// That said, you WILL need to create your own script to run this menu.
// Sample included in scripts folder.
scriptToRun = YourScriptNameHere;


/*
  If your script takes an argument, set it here.
  Currently only takes 1 argument.
*/
argsToPass = argName;


/*
  Declare the amount of vertical space between menu items.
*/
space = 30;



/* Set some necessary initial variables for the object. */
// You may name these variables anything you'd like.
// You could make your ds_list if your menu will be one instead of an array.
var1 = "somethingsomething";
var2 = "...";
var3 = ds_list_create();



/* 
   Set the menu item names for this menuModule
*/
//If menu is an array

menu[0] = "Menu0";
menu[1] = "Menu1";

// If menu is a ds_list

menu = nameOfAlreadyCreatedDSList;

/* DON'T CHANGE BELOW THIS LINE! */
/**************************************************************************/

/* 
   Set menu to on.
*/
menu_ON = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Example module Step template

/* 
   You MUST have the event_inherited here or the menu will not work.
   
   You may, however, choose to write your own DIFFERENT step function 
   for this new menu, in which case you don't need it.
*/

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Example module DrawGUI template.

/*
  You MUST have the if statement here or parts of the menu won't work.
  I suggest against changing it unless you really know what you're doing.
*/

if (global.baseMenu_ON &amp;&amp; menu_ON &amp;&amp; !global.textbox_ON) {

    /* Put your actual drawing functions here. */
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
