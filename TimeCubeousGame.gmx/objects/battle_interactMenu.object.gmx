<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>menu_battleMenuModule</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start the interact menu
show_debug_message("BATTLE INTERACT MENU CREATED.");
orientation = 0;
menu_setKeysByOrientation(orientation);
// Runs the menu module create event first.
event_inherited();

// Set script to run upon selecting from this menu.
scriptToRun = battle_interactMenuScript;

// Menu isn't array here, so set to 0 for ds_list.
menu_IsArray = 1;

// Get the menu options from the enemy battle ops in obj_battle.
for (var i = 0; i &lt; array_length_1d(obj_battle.enemyBattleOps); i++) {
    menu[i] = obj_battle.enemyBattleOps[i];
    //show_debug_message(menu[i]);
}

// Add self to state tracking registry.
objStateID = 3;
state_addSelfToRegistry(global.playerTurnState, global.playerTurnReg, objStateID);
battle_setNextState(battle_playerTurn, objStateID);
//show_debug_message("In battle menu, setNextState, playerTurn machine now: " + string(global.playerTurnState));

// Turn the menu on once you build the menu.
menu_ON = 1;

//show_debug_message("Parent of interact menu is: " + parent);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("INTERACT MENU DESTROY EVENT.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the movement of the pointer icon up and down the menu
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the GUI for the inventory.

if (global.playerTurnState[objStateID] &amp;&amp; battle_playerTurn.playerTurnOK &amp;&amp; menu_ON &amp;&amp; !childMenus_ON &amp;&amp; !battle_playerTurn.turnRunning)
//if (global.playerTurnState[objStateID] &amp;&amp; menu_ON &amp;&amp; !childMenus_ON &amp;&amp; !battle_playerTurn.turnRunning)
{   draw_set_color(c_white);
    draw_sprite(spr_pointer, 0, x + 60 + 75, y+365 + (cursorPos*30));
    
    var i;
    for (i = 0; i &lt; array_length_1d(menu); i += 1) {
        draw_text(x + 80 + 75, y+380 + (i*30), string(menu[i]));
       
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
