<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the base menu
show_debug_message("BATTLE MENU CREATED.");

// Set base menu vars.
menu_makeBaseMenu();

// Set orientation for menu.
orientation = 1;
menu_setKeysByOrientation(orientation);

// What script should we run when we've chosen something?
scriptToRun = menu_battleMenuScript;

// Add self to state tracking registry.
// Menu corresponds to the idling state in the player turn state.
objStateID = 0;
state_addSelfToRegistry(global.playerTurnState, global.playerTurnReg, objStateID);
battle_setNextState(battle_playerTurn, objStateID);

/** Customization variables **/
/* Feel free to change these to suit your game. */
menu[0] = "Fight";
menu[1] = "Synch";
menu[2] = "Cure";
menu[3] = "Act";
menu[4] = "Item";

parent = "NONE";
VGAP = 20;
space = 150;
//show_debug_message("Player turn states at menu start are: " + string(global.playerTurnState));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("BATTLE MENU DESTROY EVENT.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the movement of the pointer icon up and down the menu

// Check if the child menus are on, first.
childMenus_ON = scr_isChildMenu_ON();

if (battle_playerTurn.playerTurnOK &amp;&amp; state_stepFuncOK(global.playerTurnState) &amp;&amp; !childMenus_ON)
{
    var move = 0;
    
// Move down
   move -= max(keyboard_check_pressed(MENU_KEY_UP_1), keyboard_check_pressed(MENU_KEY_UP_2), 0);

// Move up
   move += max(keyboard_check_pressed(MENU_KEY_DOWN_1), keyboard_check_pressed(MENU_KEY_DOWN_2), 0);

// move = 0 means that right now, we don't want to move.

// Otherwise, change the cursor position, in a circular direction.
   if (move != 0) {
      cursorPos += move;
      if (cursorPos &lt; 0) {
         cursorPos = array_length_1d(menu) - 1;
      }
      if (cursorPos &gt;= array_length_1d(menu)) {
            cursorPos = 0;
      }
   }

// Check for the selection key push.

    var select;
    select = max(keyboard_check_released(MENU_CONFIRM_1), keyboard_check_released(MENU_CONFIRM_2), 0);

    if (select == 1) { 
       lastCursorPos = cursorPos;
       script_execute(scriptToRun, 0); 
    }

}

else { cursorPos = lastCursorPos; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the base menu GUI

//if (battle_playerTurn.playerTurnOK &amp;&amp; state_stepFuncOK(global.playerTurnState) &amp;&amp; !childMenus_ON &amp;&amp; !battle_playerTurn.turnRunning)
if (global.playerTurnState[objStateID] &amp;&amp; battle_playerTurn.playerTurnOK &amp;&amp; !childMenus_ON &amp;&amp; !battle_playerTurn.turnRunning)
{   
       //draw_text(30, 120, "YOU SHOULD SEE THE POINTER.");
       draw_sprite(spr_pointer, 0, x + (cursorPos*space), y + 500);
       
}
for (var i = 0; i &lt; array_length_1d(menu); i++) {
   if (i == 0) {draw_text(x + 5 + 25, y + 510, menu[i]);}
   else { draw_text(x + 5 + 25 + (i*space), y + 510, menu[i]);}
} 
//draw_text(30, 30, "PlayerTurnOK value: " + string(battle_playerTurn.playerTurnOK));
//draw_text(30, 60, "PlayerTurnRunning value: " + string(battle_playerTurn.turnRunning));
//draw_text(30, 90, "ChildMenusON value: " + string(childMenus_ON));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
