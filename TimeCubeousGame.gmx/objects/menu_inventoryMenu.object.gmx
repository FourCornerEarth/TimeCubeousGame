<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>menu_menuMod</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start the inventory menu
show_debug_message("CREATING INVENTORY MENU.");
// Runs the menu module create event first.
event_inherited();

orientation = 0;
menu_setKeysByOrientation(orientation);

// Set script to run upon selecting from this menu.
scriptToRun = menu_itemSelected;

// Menu isn't array here, so set to 0 for ds_list.
menu_IsArray = 0;

// List will stack items that you have more than one of.
menu = ds_list_create();

for (var i = 0; i &lt; ds_list_size(global.inventory); i++) {
    var item = global.inventory[| i];
    var iName = global.inventory[| i].name;
    var ind = ds_list_find_index(menu, iName);
    if (ind &gt; -1) {
       count[ind]++;
    }
    else {
         itemList[i] = item; // Store the item ID so we can access it for the remove function
         ds_list_add(menu, iName);
         count[i] = 1;
    }
}


// Turn the menu on once you build the menu.
menu_ON = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy menu object
show_debug_message("INVENTORY MENU DESTROY EVENT.");
ds_list_destroy(menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the movement of the pointer icon up and down the menu
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the GUI for the inventory.

if (global.state[objStateID] &amp;&amp; menu_ON){
    draw_set_color(c_white);

    draw_sprite(spr_menuItem, 0, WID + GAP,VGAP);
    
    draw_sprite(spr_pointer, 0, WID + GAP + HBORDER, VGAP + VBORDER + (cursorPos * space));
    
    var i;
    for (i = 0; i &lt; ds_list_size(menu); i += 1) {
        draw_text(WID + GAP + HBORDER + HPOINTEROFFSET + space, VGAP + VBORDER + VPOINTEROFFSET + (i * space), string(menu[| i] + ": " + string(count[i])));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
