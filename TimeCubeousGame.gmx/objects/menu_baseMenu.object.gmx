<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the base menu

scr_startNewModule();
orientation = 0;
scr_setKeysByOrientation(orientation);

/** DO NOT CHANGE THESE VARIABLES UNLESS YOU REALLY KNOW WHAT YOU'RE DOING! **/

// To toggle the base menu on and off. 
// Shutting this var off shuts off all menus.
//globalvar baseMenu_ON;
global.baseMenu_ON = 0;

// Stores the menu modules attached to this base menu. An array.
numModules = 0;
is_menuModule_ON[numModules] = 0;

// Child Menus on or not? Checked later on.
childMenus_ON = 0;

// What script should we run when we've chosen something?
scriptToRun = scr_gameMenu;

// Decides where the cursor is right now.
cursorPos = 0;
lastCursorPos = 0;

/** Customization variables **/
/* Feel free to change these to suit your game. */

// Main menu items. User should fill these out.
baseMenu[0] = "Status";
baseMenu[1] = "Inventory";
baseMenu[2] = "Quit";

// Stores the amt of space between items on the menu
space = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the movement of the pointer icon up and down the menu

// Check if the child menus are on, first.
childMenus_ON = scr_isBaseChild_ON();


if (global.baseMenu_ON &amp;&amp; !childMenus_ON &amp;&amp; !global.textbox_ON)
{
    var move = 0;
    
// Move down
   move -= max(keyboard_check_pressed(MENU_KEY_UP_1), keyboard_check_pressed(MENU_KEY_UP_2), 0);

// Move up
   move += max(keyboard_check_pressed(MENU_KEY_DOWN_1), keyboard_check_pressed(MENU_KEY_DOWN_2), 0);

// move = 0 means that right now, we don't want to move.

// Otherwise, change the cursor position, in a circular direction.
   if (move != 0) {
      cursorPos += move;
      if (cursorPos &lt; 0) {
         cursorPos = array_length_1d(baseMenu) - 1;
      }
      if (cursorPos &gt;= array_length_1d(baseMenu)) {
            cursorPos = 0;
      }
   }

// Check for the selection key push.

    var select;
    select = max(keyboard_check_released(MENU_CONFIRM_1), keyboard_check_released(MENU_CONFIRM_2), 0);

    if (select == 1) { 
       lastCursorPos = cursorPos;
       script_execute(scriptToRun, 0); 
    }

}

else { cursorPos = lastCursorPos; }

if (keyboard_check_released(MENU_EXIT)){
   scr_baseMenuOff();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the base menu GUI

if (global.baseMenu_ON &amp;&amp; !global.textbox_ON) {
   draw_set_color(c_black);

    draw_sprite(spr_gameMenu, 0, 0, 0);
    draw_sprite(spr_pointer, 0, x + 16, y + 232 + (cursorPos * space));
    draw_text(x+50, y+50, global.name);
    draw_text(x+50, y+80, "HP:  " + string(global.HP));
    draw_text(x+50, y+110, "MP:  " +  string(global.MP));
    
    
    var i;
    for (i = 0; i &lt; array_length_1d(baseMenu); i += 1) {
        draw_text(x + 16 + space, y + 250 + (i * space), string(baseMenu[i]));
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
