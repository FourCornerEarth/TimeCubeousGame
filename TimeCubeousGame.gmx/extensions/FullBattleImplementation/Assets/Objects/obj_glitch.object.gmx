<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_glitch</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create variables

//glitch hp

HP = 20;

//random rotation

image_angle = irandom(360);

// These vars carried over from cont_glitches
/*  p.col = glitch_x;
    p.row = glitch_y;
    p.xSize = 217;
    p.mul = 38;
    p.ySize = 125;
*/

justMoved = 1;
alarmSet = 0;
draw = 0;

//now for sync amount

syncFill = cont_hpnsynch.maxSynch/cont_glitches.glitch_total;
show_debug_message("sync fill is " + string(syncFill));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// When destroyed, removes a number from the controller's glitch count

cont_glitches.glitches_amount--;
//if its negative it has to remove this amount
if (game_battle.gbt == game_battle.bonus) {
   global.sync += syncFill;
}
else {
     global.sync -= syncFill;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// After we have waited 30 steps

// Unset justMoved
//show_debug_message("In the alarm event.");
justMoved = 0;
alarmSet = 0;

// Enact the moving code.
//show_debug_message("Trying to run event_user(0).");
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checks if its hp is to 0 and then offs itself

if (HP &lt;= 0)
{
    instance_destroy();
}

// If we've just moved, set the alarm to wait.
else if (justMoved &amp;&amp; !alarmSet) {
     //show_debug_message("justMoved = 1, alarmSet = 0.");
     alarm[0] = room_speed*.85;
     alarmSet = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move every half a second, or 30 steps.
//show_debug_message("In the user event.");
var cCol = col;
var cRow = row;

// If we're in a spot in the middle of the grid
/*if (!col &amp;&amp; ! row) {
// Generate a slot
   col = choose(col, col+1, col-1);
   row = choose(row, row+1, row-1);
   // As long as we get generating the same spot, choose new rows and columns.
   if (col == cCol &amp;&amp; row == cRow) {
     var choice = choose("row", "col");
     if (choice == "col") { 
        col = choose(col, col+1, col-1); 
     }
     else { 
        row = choose(row, row+1, row-1);
     }
   }
   x = xSize+(col*mul);
   y = ySize+(row*mul);
}*/

// If we're in a corner square...
/*else if (col == 0 &amp;&amp; row == 0 || col == 0 &amp;&amp; row == 8 || col == 8 &amp;&amp; row == 0 || col == 8 &amp;&amp; row == 8) {
   if (col == 8) {
      col = choose(col, col-1);
   }
   if (row == 8) {
      row = choose(row, row-1);
   }
   row = choose(0, row+1);
   col = choose(0, col+1);
   if (!row &amp;&amp; !col) {
      
   }
}
*/
//else if (col == 0 || row == 8 || col == 8 || row == 0) {
   
   // Generate a slot.
   if (col == 0) {
      col = choose(col, col+1);
   }
   else if (col == 8) {
      col = choose(col, col-1);
   }
   else {
      col = choose(col, col+1, col-1);
   }
   
   if (row == 0) {
      row = choose(row, row+1);
   }
   else if (row == 8) {
      row = choose(row, row-1);
   }
   else {
      row = choose(row, row+1, row-1);
   }
   
   // If we generate the same slot
   if (col == cCol &amp;&amp; row == cRow) {
     var choice = choose("row", "col");
     if (choice == "col") { 
           if (col == 0) {
                col = choose(col, col+1);
           }
           else if (col == 8) {
                col = choose(col, col-1);
           }
           else {
                col = choose(col, col+1, col-1);
           } 
     } // end if choice == col
     else { 
        if (row == 0) {
           row = choose(row, row+1);
        }
        else if (row == 8) {
             row = choose(row, row-1);
        }
        else {
             row = choose(row, row+1, row-1);
        }
     }// end else from if choice == col
   } // end if col == cCol
// Do the move.   
   x = xSize+(col*mul);
   y = ySize+(row*mul);
// Now we've just moved.
   justMoved = 1;
// Redraw, now.   
   draw = 1;
//} // end else if we're on the border somewhere

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
