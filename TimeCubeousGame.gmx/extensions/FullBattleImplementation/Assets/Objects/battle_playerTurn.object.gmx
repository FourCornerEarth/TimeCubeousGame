<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set into state machine and init.
show_debug_message("PLAYER TURN OBJ CREATED.");

// Assign stateID corresponding to btlState's playerTurn state.
objStateID = BATTLE_STATE.PLAYER_TURN;
startingBattleState = game_battle.startingBattleState;

/* Battle States */
/* 
   0 = player turn
   1 = updating
   2 = enemy turn
   3 = battle ending

*/
state_addSelfToRegistry(global.btlState, global.btlReg, objStateID);
battle_setNextState(game_battle, startingBattleState);
//show_debug_message("In Player Turn, setNextState, battle machine now: " + string(global.btlState));


// Used if there's some automated part of the turn that needs to be finished.
turnRunning = 0;
playerTurnOK = 0;

// Has the state changed?
stateHasChanged = 0;

// Keep track of the next state coming in playerTurnState machine. Always starts at 0.
nextState = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("PLAYER TURN OBJECT DESTROY EVENT.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn this object on or off depending.

if (!state_stepFuncOK(global.btlState)) {
    playerTurnOK = 0;
    // If this menu is turned off, then the next state is the idle state.
    nextState = 0;
    stateHasChanged = 1;
    // Set all states back to 0 except the idle state.
    //state_notifyBattlePersistents(global.playerTurnState, nextState);
}
else {

   if (stateHasChanged) {
      stateHasChanged = 0;
      global.playerTurnState = state_notifyPersistent(global.playerTurnState, nextState);
      show_debug_message("PLAYER STATE HAS CHANGED, IS NOW: " + string(global.playerTurnState));
   }
   playerTurnOK = 1;
   if (global.playerTurnState[PLAYER_TURN_STATE.TURN_OVER]) {
      show_debug_message("PLAYER TURN OVER. SWITCHING TO ENEMY TURN.");
      battle_setNextState(game_battle, BATTLE_STATE.ENEMY_TURN);
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
