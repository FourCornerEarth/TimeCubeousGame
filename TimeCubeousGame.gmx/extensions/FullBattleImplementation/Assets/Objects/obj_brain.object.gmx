<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_brain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On Creation, Variables start

//sets what the brain will be doing
//0 = idle
//1 = angry
mood = 0;

//direction the brain is currenlty heading towards
//used for idle
//0 = left
//1 = right
dirx = 0;

//for the brain bounce animation
//dictates if it moves down or up
//0 = up
//1 = down
diry = 0;

//for bullet timer
//to give the bullets an interval
btimer = 40;

//the mood changer
moodchanger = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Per step

//we need this guy to either float around as he likes or chase the player 
//to attack, so it should have two different modes, idle and angry

//When Idle, the brain will float around on the top of the map, and only 
//fire a bullet when it detects the player under them once

//idle
if (!mood){
    //normal color
    image_blend = -1;
    //right
    if (dirx){
        x += 5
        if (x &gt;= 616)
        {
            image_xscale = 1;
            dirx = 0;
        }
    }//left
    else{
        x -= 5;
        if (x &lt;= 152){
            image_xscale = -1;
            dirx = 1;
        }
    }
    //for bouncing
    //regular y position = 192;
    //up
    if (diry)
    {
        y -= 2;
        if (y &lt;= 170){
            diry = 0;
        }
    }//down
    else{
        y += 2;
        if (y &gt;= 214){
            diry = 1;
        }
    }

} //angry
else if (mood){
    //turns it red-ish tint
    image_blend = c_red;
    //lowers brain down to where it can bowl you over always
    //on the top line
    if (y &lt; 220)
    {
        y += 2;
    }
    
    //now for the chase
    //player location data
    playerx = rikuToken.x;
     //if not in the same x location
    if (x != rikuToken.x)
    {
        //'vector' of where the player sprite is by comparison to the brain
        headingto = point_direction(x, 0, playerx, 0);        
        //we need to know where the brain is facing to see if we will turn it
        //we will use dirx for this temporarily, there have been no issues
        //thus far to conflict with the idle mode
        
        //to the right
        if (headingto == 0)
        {
            x += 5;
            //if it was previously facing left
            if (dirx == 0)
            {
                dirx = 1;
                image_xscale = -1;
            }
        } //to the left
        else if (headingto == 180)
        {
            x -= 5;
            
            //if it was previously facing right
            if (dirx == 1)
            {
                dirx = 0;
                image_xscale = 1;
            }
        }
    } //same location 
    else {
        //it shoots at you
        
        //we can make the interval random later
        if (btimer = 40){ instance_create(x, y, UNDO); btimer = 0;}
        btimer++;
    }
}

 
    
    if (moodchanger &gt; 700)
    {
        if (mood == 1) {
            mood = 0;
            moodchanger = 0;
        } else {
            mood = 1;
            moodchanger = 0;
        }
    }
    
    moodchanger++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///test

if (mood == 1) {
    mood = 0;
} else if (mood == 0) {
    mood = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
